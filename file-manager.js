// Generated by CoffeeScript 1.9.2
var File, FileManager, FileUploader, FileViewer, Images;

Images = new FS.Collection('images', {
  stores: [new FS.Store.FileSystem('images')]
});

if (Meteor.isClient) {
  FileManager = ReactMeteor.createClass({
    templateName: 'FileManager',
    displayName: 'FileManager',
    startMeteorSubscriptions: function() {
      return Meteor.subscribe('images');
    },
    getMeteorState: function() {
      return {
        data: Images.find().fetch()
      };
    },
    render: function() {
      return React.createElement(ReactBootstrap.Grid, null, React.createElement(ReactBootstrap.PageHeader, null, "Meteor File Manager"), React.createElement(FileUploader, null), React.createElement(FileViewer, {
        "data": this.state.data
      }));
    }
  });
  FileUploader = React.createClass({
    displayName: 'FileUploader',
    _changeFile: function() {
      var file;
      file = this.refs.fileInput.getInputDOMNode().files[0];
      return Images.insert(file, (function(_this) {
        return function(err, fileObj) {
          if (err) {
            return alert(err);
          } else {
            alert('upload done!');
            return _this.refs.fileInput.getInputDOMNode().value = '';
          }
        };
      })(this));
    },
    render: function() {
      return React.createElement(ReactBootstrap.Input, {
        "ref": "fileInput",
        "type": "file",
        "label": "Upload a File",
        "onChange": this._changeFile
      });
    }
  });
  FileViewer = React.createClass({
    propTypes: {
      data: React.PropTypes.array
    },
    displayName: 'FileViewer',
    _createElement: function(el) {
      return React.createElement(File, {
        "key": el._id,
        "data": el
      });
    },
    render: function() {
      return React.createElement(ReactBootstrap.Row, null, _.map(this.props.data, this._createElement));
    }
  });
  File = React.createClass({
    propTypes: {
      data: React.PropTypes.object.isRequired
    },
    displayName: 'File',
    _deleteFile: function() {
      return Images.remove(this.props.data._id);
    },
    render: function() {
      var file;
      file = this.props.data;
      return React.createElement(ReactBootstrap.Col, {
        "xs": 6.,
        "md": 3.
      }, React.createElement(ReactBootstrap.Thumbnail, {
        "src": file.url(),
        "alt": "thumbnail"
      }, React.createElement("h3", null, file.name()), React.createElement("p", {
        "style": {
          margin: 0
        }
      }, React.createElement(ReactBootstrap.Button, {
        "bsStyle": "danger",
        "onClick": this._deleteFile
      }, "\t\t\t\t\t\t\tDelete"))));
    }
  });
}

if (Meteor.isServer) {
  Meteor.publish('images', function() {
    return Images.find();
  });
}
